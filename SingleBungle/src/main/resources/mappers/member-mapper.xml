<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="memberMapper">

	<!-- resultMap : 조회된 result set의 컬럼명과 VO의 필드명이 같지 않을 때 매핑 시키는 역할 -->
	<resultMap type="Member" id="member_rm">

		<!-- DB의 기본 키 -->
		<id property="memberNo" column="MEM_NO" />

		<!-- DB의 일반 컬럼들 -->
		<result property="memberId" column="MEM_ID" />
		<result property="memberPwd" column="MEM_PW" />
		<result property="memberName" column="MEM_NM" />
		<result property="memberNickname" column="NICKNAME" />
		<result property="memberPhone" column="PHONE" />
		<result property="memberEmail" column="EMAIL" />
		<result property="memberGender" column="GENDER" />
		<result property="memberScsnFl" column="SCSN_FL" /> <!-- 탈퇴 여부 -->
		<result property="memberSignDt" column="SIGN_DT" /> <!-- 가입일 -->
		<result property="memberGrade" column="MEM_GRADE" /> <!-- 등급 -->
		<result property="memberCertifiedFl" column="CERTIFIED_FL" /> <!-- 동네인증 여부 -->
		<result property="address" column="ADDRESS" /> 

	</resultMap>
	
	<resultMap type="Member" id="login_rm">

      <!-- DB의 기본 키 -->
      <id property="memberNo" column="MEM_NO" />

      <!-- DB의 일반 컬럼들 -->
      <result property="memberId" column="MEM_ID" />
      <result property="memberPwd" column="MEM_PW" />
      <result property="memberName" column="MEM_NM" />
      <result property="memberNickname" column="NICKNAME" />
      <result property="memberPhone" column="PHONE" />
      <result property="memberEmail" column="EMAIL" />
      <result property="memberGender" column="GENDER" />
      <result property="memberScsnFl" column="SCSN_FL" /> <!-- 탈퇴 여부 -->
      <result property="memberSignDt" column="SIGN_DT" /> <!-- 가입일 -->
      <result property="memberGrade" column="MEM_GRADE" /> <!-- 등급 -->
      <result property="memberCertifiedFl" column="CERTIFIED_FL" /> <!-- 동네인증 여부 -->
      <result property="address" column="ADDRESS" /> 

   </resultMap>

	<resultMap type="ABoard" id="board_rm">
		<id property="boardNo" column="BOARD_NO" />

		<result property="boardTitle" column="BOARD_TITLE" />
		<result property="boardContent" column="BOARD_CONTENT" />
		<result property="readCount" column="READ_COUNT" />
		<result property="boardCreateDate" column="CREATE_DT" />
		<result property="boardStatus" column="STATUS" />
		<result property="boardCode" column="BOARD_CD" />
		<result property="categoryCode" column="COTEGORY_CD" />
		<result property="memberNo" column="MEM_NO" />
	</resultMap>
	
	<resultMap type="MReply" id="reply_rm">
		<id property="replyNo" column="REPLY_NO" />
		<result property="replyContent" column="REPLY_CONTENT" />
		<result property="parentBoardNo" column="PARENT_BOARD_NO" />
		<result property="boardCd" column="BOARD_CD" />
		<result property="boardTitle" column="BOARD_TITLE" />
		<result property="type" column="TYPE" />
		<result property="createDt" column="CREATE_DT" />
	</resultMap>


	<!-- 로그인 -->
	<!-- resultType과 resultMap은 동시에 사용할 수 없다. -->
	<select id="loginAction" parameterType="Member" resultMap="login_rm">
		SELECT * FROM V_LOGIN
		WHERE MEM_ID = #{memberId}
		<!-- AND MEMBER_PWD = #{memberPwd} -->
		AND SCSN_FL = 'Y'				
	</select>
	
	
	<!-- 아이디 중복 체크 -->
	<select id="idDupCheck" parameterType="string" resultType="_int">
		SELECT COUNT(*) FROM MEMBER
		WHERE MEM_ID = #{memberId}
		AND SCSN_FL = 'Y'
	</select>
	
	<!-- 닉네임 중복 체크 -->
	<select id="nnDupCheck" parameterType="string" resultType="_int">
		SELECT COUNT(*) FROM MEMBER
		WHERE NICKNAME = #{memberNickname}
		AND SCSN_FL = 'Y'
	</select>
	
	
	<!-- 회원가입 -->
	<insert id="signUp" parameterType="Member">
	     INSERT INTO MEMBER 
	     VALUES(SEQ_MNO.NEXTVAL, #{memberId}, #{memberPwd},
	     #{memberName}, #{memberNickname}, #{memberPhone}, #{memberEmail},
	     #{memberGender}, DEFAULT,
	     DEFAULT, DEFAULT)
	</insert>
	
	<!-- 아이디 찾기시 이름-메일 일치 체크 -->
	<select id="nameMailCheck" parameterType="map" resultType="_int">
		SELECT COUNT(*) FROM MEMBER
		WHERE MEM_NM = #{name}
		AND EMAIL = #{mail}
	</select>
	
	<!-- 아이디 찾기 -->
	<select id="findIdResult" resultMap="member_rm">
	SELECT MEM_ID FROM MEMBER
	WHERE MEM_NM = #{memberName}
	AND EMAIL LIKE '%' || #{memberEmail} || '%'
	AND SCSN_FL = 'Y'
	</select>
	
	<!-- 비밀번호 찾기시 아이디-메일 일치 체크 -->
	<select id="idMailCheck" parameterType="map" resultType="_int">
		SELECT COUNT(*) FROM MEMBER
		WHERE MEM_ID = #{memberId}
		AND EMAIL = #{mail}
	</select>
	
	<!-- 비밀번호 찾기 -->
	<select id="findPw" parameterType="map" resultMap="member_rm">
	SELECT MEM_PW, MEM_NO FROM MEMBER
	WHERE MEM_ID = #{memberId}
	AND EMAIL LIKE '%' || #{memberEmail} || '%'
	AND SCSN_FL = 'Y'
	</select>
	
	<!-- 비번 설정  -->
	<update id="findPwUpdate" parameterType="map">
		UPDATE MEMBER SET
		MEM_PW = #{newPwd} <!-- map에 저장된 데이터의 key값을 직접 작성 -->
		WHERE MEM_NO = #{memberNo}
	</update>
	
	
	
	<!-- 내 정보 수정 -->
	<update id="mypageInfoUpdateAction" parameterType="Member"> <!-- update에서 resultType은 int로 고정이기 때문에 생략해도 된다. -->
		UPDATE MEMBER SET
		NICKNAME = #{memberNickname},
		PHONE = #{memberPhone}
		WHERE MEM_NO = #{memberNo}
	</update>
	
	
	<!-- 비밀번호 조회 -->
	<!-- parameterType: 넘겨 받아온 값(매개변수), resultType : 조회해서 나온 결과물의 타입 -->
	<select id="selectPwd" parameterType="_int" resultType="string">
		SELECT MEM_PW FROM MEMBER
	    WHERE MEM_NO = #{memberNo}
	</select>
	
	<!-- 비밀번호 수정 -->
	<update id="mypagePwUpdate" parameterType="map">
		UPDATE MEMBER SET
		MEM_PW = #{newPwd} <!-- map에 저장된 데이터의 key값을 직접 작성 -->
		WHERE MEM_NO = #{memberNo}
	</update>
	
	<!-- 회원 탈퇴 -->
	<update id="mypageSecession" parameterType="_int">
		UPDATE MEMBER SET
		SCSN_FL = 'N'
		WHERE MEM_NO=#{memberNo}
	</update>
	
	
	
<select id="getLikeBoardPageInfo" parameterType="map" resultType="_int">
	SELECT COUNT(*) FROM
		(SELECT '자유게시판' TYPE, A.BOARD_NO NO, BOARD_TITLE, CREATE_DT, BOARD_CD  
		FROM BOARD A
		JOIN BOARD_LIKE B ON(A.BOARD_NO = B.BOARD_NO)
		WHERE B.MEM_NO = #{memberNo}
		AND BOARD_CD = 1
		UNION ALL
		SELECT '후기게시판' TYPE, A.BOARD_NO NO, BOARD_TITLE, CREATE_DT, BOARD_CD  
		FROM BOARD A
		JOIN BOARD_LIKE B ON(A.BOARD_NO = B.BOARD_NO)
		WHERE B.MEM_NO = #{memberNo}
		AND BOARD_CD = 2
		UNION ALL
		SELECT '맛집게시판' TYPE, A.CAFE_NO NO, CAFE_TITLE, CREATE_DT, 6
		FROM CAFE A
		JOIN CAFE_LIKE B ON(A.CAFE_NO = B.CAFE_NO)
		WHERE B.MEM_NO = #{memberNo}
		UNION ALL
		SELECT '친구찾기' TYPE, A.FRIEND_NO NO, FRIEND_TITLE, CREATE_DT, 7
		FROM FRIEND A
		JOIN FRIEND_LIKE B ON(A.FRIEND_NO = B.FRIEND_NO)
		WHERE B.MEM_NO = #{memberNo}
		UNION ALL
		SELECT '사고팔고' TYPE, A.MARKET_NO NO, MARKET_TITLE, CREATE_DT, 8 
		FROM MARKET A
		JOIN MARKET_LIKE B ON(A.MARKET_NO = B.MARKET_NO)
		WHERE B.MEM_NO = #{memberNo})
</select>

<select id="selectLikeBoard" parameterType="_int" resultMap="board_rm">
	SELECT '자유게시판' TYPE, A.BOARD_NO, BOARD_TITLE, CREATE_DT, BOARD_CD  
	FROM BOARD A
	JOIN BOARD_LIKE B ON(A.BOARD_NO = B.BOARD_NO)
	WHERE B.MEM_NO = #{memberNo}
	AND BOARD_CD = 1
	UNION ALL
	SELECT '후기게시판' TYPE, A.BOARD_NO, BOARD_TITLE, CREATE_DT, BOARD_CD  
	FROM BOARD A
	JOIN BOARD_LIKE B ON(A.BOARD_NO = B.BOARD_NO)
	WHERE B.MEM_NO = #{memberNo}
	AND BOARD_CD = 2
	UNION ALL
	SELECT '맛집게시판' TYPE, A.CAFE_NO, CAFE_TITLE, CREATE_DT, 6
	FROM CAFE A
	JOIN CAFE_LIKE B ON(A.CAFE_NO = B.CAFE_NO)
	WHERE B.MEM_NO = #{memberNo}
	UNION ALL
	SELECT '친구찾기' TYPE, A.FRIEND_NO, FRIEND_TITLE, CREATE_DT, 7
	FROM FRIEND A
	JOIN FRIEND_LIKE B ON(A.FRIEND_NO = B.FRIEND_NO)
	WHERE B.MEM_NO = #{memberNo}
	UNION ALL
	SELECT '사고팔고' TYPE, A.MARKET_NO, MARKET_TITLE, CREATE_DT, 8 
	FROM MARKET A
	JOIN MARKET_LIKE B ON(A.MARKET_NO = B.MARKET_NO)
	WHERE B.MEM_NO = #{memberNo}
</select>


<!-- 내가 쓴 글 페이징 -->
<select id="getMyBoardPageInfo" parameterType="map" resultType="_int">
SELECT COUNT(*) FROM
	(SELECT BOARD_NO, BOARD_TITLE, BOARD_CD, '자유게시판' TYPE, CREATE_DT
	FROM BOARD A
	JOIN MEMBER B ON(A.MEM_NO = B.MEM_NO)
	WHERE B.MEM_NO = #{memberNo}
	AND BOARD_CD=1
	UNION ALL
	SELECT BOARD_NO, BOARD_TITLE, BOARD_CD, '후기게시판' TYPE, CREATE_DT
	FROM BOARD A
	JOIN MEMBER B ON(A.MEM_NO = B.MEM_NO)
	WHERE B.MEM_NO = #{memberNo}
	AND BOARD_CD=2
	UNION ALL
	SELECT CAFE_NO, CAFE_TITLE, 6, '맛집게시판' TYPE, CREATE_DT
	FROM CAFE A
	JOIN MEMBER B ON(A.MEM_NO = B.MEM_NO)
	WHERE B.MEM_NO = #{memberNo}
	UNION ALL
	SELECT FRIEND_NO, FRIEND_TITLE, 7, '친구찾기' TYPE, CREATE_DT
	FROM FRIEND A
	JOIN MEMBER B ON(A.MEM_NO = B.MEM_NO)
	WHERE B.MEM_NO = #{memberNo}
	UNION ALL
	SELECT MARKET_NO, MARKET_TITLE, 8, '사고팔고' TYPE, CREATE_DT
	FROM MARKET A
	JOIN MEMBER B ON(A.MEM_NO = B.MEM_NO)
	WHERE B.MEM_NO = #{memberNo})

</select>

<!-- 내가 쓴 글 리스트 -->
<select id="selectMyBoard" parameterType="_int" resultMap="board_rm">
	SELECT BOARD_NO, BOARD_TITLE, BOARD_CD, '자유게시판' TYPE, CREATE_DT
	FROM BOARD A
	JOIN MEMBER B ON(A.MEM_NO = B.MEM_NO)
	WHERE B.MEM_NO = #{memberNo}
	AND BOARD_CD=1
	UNION ALL
	SELECT BOARD_NO, BOARD_TITLE, BOARD_CD, '후기게시판' TYPE, CREATE_DT
	FROM BOARD A
	JOIN MEMBER B ON(A.MEM_NO = B.MEM_NO)
	WHERE B.MEM_NO = #{memberNo}
	AND BOARD_CD=2
	UNION ALL
	SELECT CAFE_NO, CAFE_TITLE, 6, '맛집게시판' TYPE, CREATE_DT
	FROM CAFE A
	JOIN MEMBER B ON(A.MEM_NO = B.MEM_NO)
	WHERE B.MEM_NO = #{memberNo}
	UNION ALL
	SELECT FRIEND_NO, FRIEND_TITLE, 7, '친구찾기' TYPE, CREATE_DT
	FROM FRIEND A
	JOIN MEMBER B ON(A.MEM_NO = B.MEM_NO)
	WHERE B.MEM_NO = #{memberNo}
	UNION ALL
	SELECT MARKET_NO, MARKET_TITLE, 8, '사고팔고' TYPE, CREATE_DT
	FROM MARKET A
	JOIN MEMBER B ON(A.MEM_NO = B.MEM_NO)
	WHERE B.MEM_NO = #{memberNo}
</select>

<!-- 내가 쓴 댓글 페이징 -->
<select id="getMyReplyPageInfo" parameterType="map" resultType="_int">
SELECT COUNT(*) FROM
	(SELECT REPLY_NO, REPLY_CONTENT, PARENT_BOARD_NO, BOARD_CD, BOARD_TITLE, '자유게시판' TYPE, CREATE_DT
	FROM BOARD_REPLY A
	JOIN BOARD C ON (A.PARENT_BOARD_NO = C.BOARD_NO)
	JOIN MEMBER B ON(C.MEM_NO = B.MEM_NO)
	WHERE A.MEM_NO = #{memberNo}
	AND BOARD_CD=1
	AND REPLY_STATUS = 'N'
	UNION ALL
	SELECT REPLY_NO, REPLY_CONTENT, PARENT_BOARD_NO, BOARD_CD, BOARD_TITLE, '후기게시판' TYPE, CREATE_DT
	FROM BOARD_REPLY A
	JOIN MEMBER B ON(A.MEM_NO = B.MEM_NO)
	JOIN BOARD C ON (A.PARENT_BOARD_NO = C.BOARD_NO)
	WHERE A.MEM_NO = #{memberNo}
	AND BOARD_CD=2
	AND REPLY_STATUS = 'N'
	UNION ALL
	SELECT REPLY_NO, REPLY_CONTENT, A.CAFE_NO, 6, CAFE_TITLE, '맛집게시판' TYPE, REPLY_CREATE_DT
	FROM CAFE_REPLY A
	JOIN MEMBER B ON(A.MEM_NO = B.MEM_NO)
	JOIN CAFE C ON (A.CAFE_NO = C.CAFE_NO)
	WHERE B.MEM_NO = #{memberNo}
	AND REPLY_STATUS = 'N'
	UNION ALL
	SELECT REPLY_NO, REPLY_CONTENT, PARENT_FRIEND_NO, 6, FRIEND_TITLE, '친구찾기' TYPE, REPLY_CREATE_DT
	FROM FRIEND_REPLY A
	JOIN MEMBER B ON(A.MEM_NO = B.MEM_NO)
	JOIN FRIEND C ON (A.PARENT_FRIEND_NO = C.FRIEND_NO)
	WHERE B.MEM_NO = #{memberNo}
	AND REPLY_STATUS = 'N'
	UNION ALL
	SELECT REPLY_NO, REPLY_CONTENT, PARENT_MARKET_NO, 6, MARKET_TITLE, '사고팔고' TYPE, REPLY_CREATE_DT
	FROM MARKET_REPLY A
	JOIN MEMBER B ON(A.MEM_NO = B.MEM_NO)
	JOIN MARKET C ON (A.PARENT_MARKET_NO = C.MARKET_NO)
	WHERE B.MEM_NO = #{memberNo}
	AND REPLY_STATUS = 'N')
</select>


<!-- 내가 쓴 댓글 리스트 -->
<select id="selectMyReply" parameterType="_int" resultMap="reply_rm"> 
	SELECT REPLY_NO, REPLY_CONTENT, PARENT_BOARD_NO, BOARD_CD, BOARD_TITLE, '자유게시판' TYPE, CREATE_DT
	FROM BOARD_REPLY A
	JOIN BOARD C ON (A.PARENT_BOARD_NO = C.BOARD_NO)
	JOIN MEMBER B ON(C.MEM_NO = B.MEM_NO)
	WHERE A.MEM_NO = #{memberNo}
	AND BOARD_CD=1
	AND REPLY_STATUS = 'N'
	UNION ALL
	SELECT REPLY_NO, REPLY_CONTENT, PARENT_BOARD_NO, BOARD_CD, BOARD_TITLE, '후기게시판' TYPE, CREATE_DT
	FROM BOARD_REPLY A
	JOIN MEMBER B ON(A.MEM_NO = B.MEM_NO)
	JOIN BOARD C ON (A.PARENT_BOARD_NO = C.BOARD_NO)
	WHERE A.MEM_NO = #{memberNo}
	AND BOARD_CD=2
	AND REPLY_STATUS = 'N'
	UNION ALL
	SELECT REPLY_NO, REPLY_CONTENT, A.CAFE_NO, 6, CAFE_TITLE, '맛집게시판' TYPE, REPLY_CREATE_DT
	FROM CAFE_REPLY A
	JOIN MEMBER B ON(A.MEM_NO = B.MEM_NO)
	JOIN CAFE C ON (A.CAFE_NO = C.CAFE_NO)
	WHERE B.MEM_NO = #{memberNo}
	AND REPLY_STATUS = 'N'
	UNION ALL
	SELECT REPLY_NO, REPLY_CONTENT, PARENT_FRIEND_NO, 6, FRIEND_TITLE, '친구찾기' TYPE, REPLY_CREATE_DT
	FROM FRIEND_REPLY A
	JOIN MEMBER B ON(A.MEM_NO = B.MEM_NO)
	JOIN FRIEND C ON (A.PARENT_FRIEND_NO = C.FRIEND_NO)
	WHERE B.MEM_NO = #{memberNo}
	AND REPLY_STATUS = 'N'
	UNION ALL
	SELECT REPLY_NO, REPLY_CONTENT, PARENT_MARKET_NO, 6, MARKET_TITLE, '사고팔고' TYPE, REPLY_CREATE_DT
	FROM MARKET_REPLY A
	JOIN MEMBER B ON(A.MEM_NO = B.MEM_NO)
	JOIN MARKET C ON (A.PARENT_MARKET_NO = C.MARKET_NO)
	WHERE B.MEM_NO = #{memberNo}
	AND REPLY_STATUS = 'N'
</select>


</mapper>